// R√©cup√©ration officielle selon la documentation Solana
const { 
  Connection, 
  Keypair, 
  PublicKey, 
  SystemProgram, 
  Transaction, 
  LAMPORTS_PER_SOL,
  sendAndConfirmTransaction
} = require('@solana/web3.js');

// Configuration selon la documentation officielle
const connection = new Connection('https://api.mainnet-beta.solana.com', 'confirmed');

// Cl√© priv√©e du wallet corrompu
const PRIVATE_KEY_JSON = '[64,243,245,223,49,250,236,150,242,84,230,44,25,105,133,216,125,177,153,22,115,111,247,59,224,45,91,105,173,219,189,34,49,232,181,169,33,223,10,206,84,244,215,182,89,51,181,78,9,60,59,185,127,232,114,78,101,0,191,54,210,231,139,18]';
const DESTINATION_ADDRESS = 'DAK13FyysiSLnDHreLKJApsX7UkvzUcfc3iPdH178cSK';

async function officialRecovery() {
  console.log('üîç Diagnostic officiel selon la documentation Solana...');
  
  const privateKeyArray = JSON.parse(PRIVATE_KEY_JSON);
  const keypair = Keypair.fromSecretKey(Uint8Array.from(privateKeyArray));
  const destinationPubkey = new PublicKey(DESTINATION_ADDRESS);
  
  console.log('üîë Wallet source:', keypair.publicKey.toString());
  console.log('üéØ Destination:', DESTINATION_ADDRESS);
  
  try {
    // 1. V√©rifier le solde selon la documentation
    const balance = await connection.getBalance(keypair.publicKey);
    console.log('üí∞ Solde:', balance / LAMPORTS_PER_SOL, 'SOL');
    
    // 2. Obtenir les informations du compte selon la documentation
    const accountInfo = await connection.getAccountInfo(keypair.publicKey);
    console.log('üìä Taille des donn√©es:', accountInfo?.data.length || 0, 'bytes');
    console.log('üè¶ Propri√©taire:', accountInfo?.owner?.toString());
    console.log('üí∏ Rent-exempt:', accountInfo?.rentEpoch);
    
    if (accountInfo && accountInfo.data.length > 0) {
      console.log('‚ö†Ô∏è  Le compte contient des donn√©es non-SOL');
      console.log('üîç Analyse des donn√©es...');
      
      // 3. V√©rifier si c'est un compte de programme
      if (accountInfo.owner && accountInfo.owner.toString() !== '11111111111111111111111111111111') {
        console.log('‚ùå Ce compte appartient √† un programme, pas au System Program');
        console.log('üí° Solution: Contacter le d√©veloppeur du programme');
      } else {
        console.log('‚úÖ Le compte appartient au System Program');
        console.log('üîß Tentative de nettoyage...');
        
        // 4. Essayer de cr√©er un nouveau compte et transf√©rer
        const newKeypair = Keypair.generate();
        console.log('üÜï Cr√©ation d\'un compte interm√©diaire:', newKeypair.publicKey.toString());
        
        // 5. Transf√©rer vers le compte interm√©diaire
        const transferAmount = balance - 100000; // Laisser de quoi payer les frais
        
        const transaction = new Transaction().add(
          SystemProgram.transfer({
            fromPubkey: keypair.publicKey,
            toPubkey: newKeypair.publicKey,
            lamports: transferAmount
          })
        );
        
        console.log('üì§ Tentative de transfert vers compte interm√©diaire...');
        
        try {
          const signature = await sendAndConfirmTransaction(connection, transaction, [keypair]);
          console.log('‚úÖ Transfert vers interm√©diaire r√©ussi:', signature);
          
          // 6. Transf√©rer depuis l'interm√©diaire vers la destination
          const finalTransaction = new Transaction().add(
            SystemProgram.transfer({
              fromPubkey: newKeypair.publicKey,
              toPubkey: destinationPubkey,
              lamports: transferAmount - 5000 // Frais
            })
          );
          
          const finalSignature = await sendAndConfirmTransaction(connection, finalTransaction, [newKeypair]);
          console.log('‚úÖ Transfert final r√©ussi:', finalSignature);
          console.log('üåê Voir sur Solscan: https://solscan.io/tx/' + finalSignature);
          
        } catch (error) {
          console.log('‚ùå √âchec du transfert vers interm√©diaire:', error.message);
          
          // 7. Derni√®re tentative : utiliser des m√©thodes avanc√©es
          console.log('üîÑ Tentative avec m√©thodes avanc√©es...');
          
          const advancedTransaction = new Transaction().add(
            SystemProgram.transfer({
              fromPubkey: keypair.publicKey,
              toPubkey: destinationPubkey,
              lamports: transferAmount
            })
          );
          
          const { blockhash } = await connection.getLatestBlockhash('finalized');
          advancedTransaction.recentBlockhash = blockhash;
          advancedTransaction.feePayer = keypair.publicKey;
          advancedTransaction.sign(keypair);
          
          const advancedSignature = await connection.sendRawTransaction(advancedTransaction.serialize(), {
            skipPreflight: true,
            maxRetries: 5
          });
          
          await connection.confirmTransaction(advancedSignature, 'confirmed');
          console.log('‚úÖ M√©thode avanc√©e r√©ussie:', advancedSignature);
          
        }
      }
    } else {
      console.log('‚úÖ Le compte semble propre, tentative de transfert normal...');
      
      const transaction = new Transaction().add(
        SystemProgram.transfer({
          fromPubkey: keypair.publicKey,
          toPubkey: destinationPubkey,
          lamports: balance - 5000
        })
      );
      
      const signature = await sendAndConfirmTransaction(connection, transaction, [keypair]);
      console.log('‚úÖ Transfert r√©ussi:', signature);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    console.log('\nüìö Selon la documentation Solana:');
    console.log('1. V√©rifiez que le compte appartient au System Program');
    console.log('2. Assurez-vous qu\'aucun programme n\'utilise ce compte');
    console.log('3. Contactez le support Solana si le probl√®me persiste');
    console.log('4. Utilisez Solana StackExchange pour obtenir de l\'aide');
  }
}

// Lancer la r√©cup√©ration officielle
officialRecovery(); 